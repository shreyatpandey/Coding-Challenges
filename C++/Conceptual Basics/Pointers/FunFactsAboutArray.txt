1. &arr is a pointer to the array.
  It points at the same memory address as arr—which decays to a pointer to its first element—but with a different type,
  whose size is that of the entire array rather than of just one element.
2. That means that &arr + 1 points at the address after the end of the array.
3. Dereferencing to *(&arr + 1) gives the address after the end of the last element (which is again the same address with a different type).
4. Finally, we can subtract the pointer to the first element to get the length of the array: *(&arr + 1) - arr.
The equivalence between array indexing and pointer arithmetic simplifies this to (&arr)[1] - arr == 1[&arr] - arr, saving a pair of parens.

Traversing array without sizeof() operator in C:-
1. One-way:-
  for (int i = 0; i < 1[&arr] - arr; i++) 
    printf("%d\n", arr[i]); 
2. Another-way:-
  for (int *p = arr; p < 1[&arr]; p++) 
    printf("%d\n", *p); 

Q1]
#include <stdio.h>
#include <stdlib.h>

int main()
{
    int arr[5] = {1,2,3,4,5};
    printf("Array-Address:%p\n",arr);
    for(int *p = arr;*p<1[&arr]-arr;p++)
    {
        printf("%p ",p);
        printf("%d\n",*p);
    }
    return 0;
}
// Output:-
Array-Address:0x7ffe313acbd0
0x7ffe313acbd0 1
0x7ffe313acbd4 2
0x7ffe313acbd8 3
0x7ffe313acbdc 4

Q2]
#include <stdio.h>
int main(void)
{
int ref[] = {8, 4, 0, 2};
int *ptr;
int index;
for (index = 0, ptr = ref; index < 4; index++, ptr++)
{
  printf("%d %d\n", ref[index], *ptr); //same output :- 8 8, 4 4,0 0,2 2
  printf("Address of each:%p\n",(void *)&ptr); //%p means to print pointer address , change this to printf("Address of each:%p\n",ptr);
}
 return 0;
}
/*
Output:-
8 8                                                                                                                     
Address of each:0x7ffeb9798bc8                                                                                          
4 4                                                                                                                     
Address of each:0x7ffeb9798bc8                                                                                          
0 0                                                                                                                     
Address of each:0x7ffeb9798bc8                                                                                          
2 2                                                                                                                     
Address of each:0x7ffeb9798bc8 
  */

// There is no difference between these two declaration of pointer to array
/*
int *ptr;
int arr[5] = {0};
ptr = arr;
or
int *ptr ;
int arr[5] = {0};
ptr = &arr;
Both point to the first element address of the array
*/
