Problem-1:-
#include <iostream>
#include <utility>

struct X {
    X() { std::cout << "1"; }
    X(X &) { std::cout << "2"; }
    X(const X &) { std::cout << "3"; }
    X(X &&) { std::cout << "4"; }
    ~X() { std::cout << "5"; }
};

struct Y {
    mutable X x;
    Y() = default;
    Y(const Y &) = default;
};

int main() {
    Y y1;
    Y y2 = std::move(y1);
}
//Output:- 1255

Problem-2:- 
#include <iostream>
struct C {
  C() { std::cout << "1"; }
  C(const C& other) { std::cout << "2"; }
  C& operator=(const C& other) { std::cout << "3"; return *this;}
};

int main() {
  C c1;
  C c2 = c1;
}
Output:- 12
Explanation:-
On the first line, C c1;, the object c1 is default initialized, so the default constructor is called, printing 1.

On the second line, C c2 = c1;, the object c2 is copy initialized, so the copy constructor is called, printing 2.
(Note that no assignment is taking place, even though there's a = involved.)

Problem-3:-
#include <iostream>

struct C {
    C() = default;
    int i;
};

int main() {
    const C c;
    std::cout << c.i;
}
// Error:-  uninitialized ‘const c’ [-fpermissive]
      const C c;

Problem-4:-
#include <iostream>

void f(int& a, const int& b) {
  std::cout << b;
  a = 1;
  std::cout << b;
}

int main(){
  int x = 0;
  f(x,x);
}
//Output:- 01
// Both a and b refer to the same variable x.
// The fact that b is a const reference does not guarantee that b isn't modified from elsewhere, only that we can't modify it.

Problem-5:-
#include <iostream>
#include <type_traits>

int j = 1;

int main() 
{
  int& i = j;
  j = 2;
  std::cout << i << j;
}
// Output:- 22
